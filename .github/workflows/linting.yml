name: Linting

on:
  pull_request:
    branches:
      - main

jobs:
  shellcheck:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Pull koalaman/shellcheck:stable Image
        run: docker pull koalaman/shellcheck:stable
      - name: Run Shellcheck against shell scripts
        run: |
          find . -type f -exec grep -m1 -l -E '^#!.*sh.*' {} \; | grep -v -E '\/(.git\/|\S+.MD|\S+.md|retired_scripts\/|acarshub-typescript\/node_modules\/)'
          docker run --rm -i -v "$PWD:/mnt" koalaman/shellcheck:stable $(find . -type f -exec grep -m1 -l -E '^#!.*sh.*' {} \; | grep -v -E '\/(.git\/|\S+.MD|\S+.md|retired_scripts\/|acarshub-typescript\/node_modules\/)')
  #        docker run --rm -i -v "$PWD:/mnt" koalaman/shellcheck:stable $(find . -type f -exec grep -m1 -l -E '^#!.*execline.*' {} \; | grep -v '/.git/')
  hadolint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint $(find . -type f -iname "Dockerfile*")

  markdownlint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Pull markdownlint/markdownlint:latest Image
        run: docker pull markdownlint/markdownlint:latest
      - name: Run markdownlint against *.md files
        run: docker run --rm -i -v "$(pwd)":/workdir --workdir /workdir markdownlint/markdownlint:latest -r ~MD013 $(find . -type f -iname '*.md' | grep -v '/.git/')

  flake8:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rrdtool librrd-dev
          python -m pip install --upgrade pip
          pip install flake8 pytest wheel
          pip install -r $GITHUB_WORKSPACE/rootfs/webapp/requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 *.py --extend-ingore=W503,W504,E501

  acarshub-typescript:
    runs-on: ubuntu-latest
    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2

      # Get version tag
      # git log -1 : get the latest commit
      # --format="%ct" : committer date, UNIX timestamp
      # Then using `date` to format to YYYYMMDD format
      - name: Get date of last commit for VERSION_TAG
        run: |
          echo "VERSION_TAG=$(sed '1!d' ./version)" >> $GITHUB_ENV

      # Show version tag
      - name: Show version tag
        run: |
          echo "ACARS Hub Version: ${{ env.VERSION_TAG }}"

      # Set version tag in webapp
      # -
      #   name: Patch webapp with VERSION_TAG
      #   run: |
      #     sed -i 's/Pre-Release/ACARS Hub Pre-Release: ${{ env.VERSION_TAG }}/' ./acarshub-typescript/src/menu.ts

      - name: Create version file
        run: |
          echo "${{ env.VERSION_TAG }}" >> ./rootfs/acarshub-version

      - name: Build ACARSHub typescript test
        working-directory: ./acarshub-typescript
        run: |
          set -xe
          npm install
          sed -i 's/Pre-Release/ACARS Hub Pre-Release: ${{ env.VERSION_TAG }}/' ./src/helpers/menu.ts
          npm run build-dev
          mkdir -p ./webapp/static/images
          mkdir -p ./webapp/static/js
          mkdir -p ./webapp/static/sounds
          mkdir -p ./webapp/templates
          cp -r ./dist/static/images ./webapp/static/
          cp -r ./dist/static/sounds ./webapp/static/
          cp -r ./dist/static/js ./webapp/static/
          mv ./dist/static/index.html ./webapp/templates/
          tar cvfz webapp.tar.gz ./webapp
          cp webapp.tar.gz ../webapp.tar.gz
