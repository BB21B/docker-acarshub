name: Deploy to Docker Hub

on:

  # Build and deploy the image on pushes to main branch
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.MD'

  # Build and deploy the image nightly (to ensure we pick up any security updates)
  schedule:
    - cron: "0 0 * * *"

jobs:
  make_acarshub_typescript:
    name: Build ACARS Hub typescript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

              # Get version tag
      # git log -1 : get the latest commit
      # --format="%ct" : committer date, UNIX timestamp
      # Then using `date` to format to YYYYMMDD format
      - name: Get version tag from file
        run: |
          echo "VERSION_TAG=$(sed '1!d' ./version)" >> $GITHUB_ENV
          echo "VERSION_TAG_DOCKER=$(sed '2!d' ./version)" >> $GITHUB_ENV

      # Show version tag
      - name: Show version tag
        run: |
          echo "ACARS Hub Version: ${{ env.VERSION_TAG }}"
          echo "ACARS Hub Docker Version: ${{ env.VERSION_TAG_DOCKER }}"

      # Set version tag in webapp
      - name: Patch webapp with VERSION_TAG
        run: |
          sed -i 's/Pre-Release/ACARS Hub Version: ${{ env.VERSION_TAG }}/' ./acarshub-typescript/src/helpers/menu.ts

      - name: Create version file
        run: |
          echo "${{ env.VERSION_TAG }}" >> ./rootfs/acarshub-version

      # build acarshub typescript

      - name: Build ACARSHub typescript
        working-directory: ./acarshub-typescript
        run: |
          npm install
          npm run build
          mkdir -p ./webapp/static/images
          mkdir -p ./webapp/static/js
          mkdir -p ./webapp/static/sounds
          mkdir -p ./webapp/templates
          cp -r ./dist/static/images ./webapp/static/
          cp -r ./dist/static/sounds ./webapp/static/
          cp -r ./dist/static/js ./webapp/static/
          mv ./dist/static/index.html ./webapp/templates/
          tar cvfz webapp.tar.gz ./webapp
          cp webapp.tar.gz ../webapp.tar.gz

      # upload webapp.tar.gz to github artifact
      - name: Upload webapp.tar.gz to github artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp.tar.gz
          path: ../webapp.tar.gz

  deploy_dockerhub_latest:
    name: Deploy to latest to dockerhub
    runs-on: ubuntu-latest
    needs: [make_acarshub_typescript]
    # Set job-wide environment variables
    #  - REPO: repo name on dockerhub
    #  - IMAGE: image name on dockerhub
    env:
      REPO: fredclausen
      IMAGE: acarshub
      PUSH: true
    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve ACARS Hub typescript
        uses: actions/download-artifact@v2
        with:
          name: webapp.tar.gz
          path: /webapp.tar.gz

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ env.PUSH }}
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:latest

  deploy_dockerhub_version_specific:
      name: Deploy version to dockerhub
      runs-on: ubuntu-latest
      needs: [make_acarshub_typescript]
      # Set job-wide environment variables
      #  - REPO: repo name on dockerhub
      #  - IMAGE: image name on dockerhub
      env:
        REPO: fredclausen
        IMAGE: acarshub
        PUSH: true
      steps:
        # Check out our code
        - name: Checkout
          uses: actions/checkout@v2

        - name: Retrieve ACARS Hub typescript
          uses: actions/download-artifact@v2
          with:
            name: webapp.tar.gz
            path: /webapp.tar.gz

        - name: Create version file
          run: |
            echo "${{ env.VERSION_TAG }}" >> ./rootfs/acarshub-version
        # Log into docker hub (so we can push images)
        -
          name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # Set up buildx for multi platform builds
        -
          name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1

        # Build version specific
        -
          name: Build & Push - version specific
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./Dockerfile
            no-cache: true
            platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
            push: ${{ env.PUSH }}
            tags: ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.VERSION_TAG_DOCKER }}

  deploy_dockerhub_latest_no_healthcheck:
      name: Deploy to latest/no healthcheck
      runs-on: ubuntu-latest
      needs: [make_acarshub_typescript]
      # Set job-wide environment variables
      #  - REPO: repo name on dockerhub
      #  - IMAGE: image name on dockerhub
      env:
        REPO: fredclausen
        IMAGE: acarshub
        PUSH: true
      steps:
        # Check out our code
        - name: Checkout
          uses: actions/checkout@v2

        - name: Retrieve ACARS Hub typescript
          uses: actions/download-artifact@v2
          with:
            name: webapp.tar.gz
            path: /webapp.tar.gz

        - name: Create version file
          run: |
            echo "${{ env.VERSION_TAG }}" >> ./rootfs/acarshub-version

        # Set up QEMU for multi-arch builds
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1

        # Log into docker hub (so we can push images)
        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # Set up buildx for multi platform builds
        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1

        # Patch dockerfile to remove healthcheck
        - name: Patch Dockerfile to remove healthcheck
          run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

        # Build "latest_nohealthcheck"
        - name: Build & Push - latest nohealthcheck
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./Dockerfile.nohealthcheck
            no-cache: true
            platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
            push: ${{ env.PUSH }}
            tags: ${{ env.REPO }}/${{ env.IMAGE }}:latest_nohealthcheck

  deploy_dockerhub_version_specific_no_healthcheck:
      name: Deploy version specific no healthcheck to dockerhub
      runs-on: ubuntu-latest
      needs: [make_acarshub_typescript]
      # Set job-wide environment variables
      #  - REPO: repo name on dockerhub
      #  - IMAGE: image name on dockerhub
      env:
        REPO: fredclausen
        IMAGE: acarshub
        PUSH: true
      steps:
        # Check out our code
        - name: Checkout
          uses: actions/checkout@v2

        - name: Retrieve ACARS Hub typescript
          uses: actions/download-artifact@v2
          with:
            name: webapp.tar.gz
            path: /webapp.tar.gz

        - name: Create version file
          run: |
            echo "${{ env.VERSION_TAG }}" >> ./rootfs/acarshub-version

        # Set up QEMU for multi-arch builds
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1

        # Log into docker hub (so we can push images)
        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # Set up buildx for multi platform builds
        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1

        # Patch dockerfile to remove healthcheck
        - name: Patch Dockerfile to remove healthcheck
          run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

        # Build version specific _nohealthcheck
        - name: Build & Push - version specific nohealthcheck
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./Dockerfile.nohealthcheck
            no-cache: true
            platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
            push: ${{ env.PUSH }}
            tags: ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.VERSION_TAG_DOCKER }}_nohealthcheck
